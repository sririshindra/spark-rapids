// automatically generated by the FlatBuffers compiler, do not modify

package ai.rapids.spark.format;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Flat buffer for Rapids UCX Shuffle Metadata Response. The response includes
 * tableMeta : metadata information on the tables that will be sent as part of the subsequent messages for this request-response pair.
 * contentMetaSize : the expected content size,
 * isValid : a flag to indicate if the message is valid or a push back from the server
 * waitPeriod : timestamp after which the server expects to receive this request again.
 */
public final class MetadataResponse extends Table {
  public static MetadataResponse getRootAsMetadataResponse(ByteBuffer _bb) { return getRootAsMetadataResponse(_bb, new MetadataResponse()); }
  public static MetadataResponse getRootAsMetadataResponse(ByteBuffer _bb, MetadataResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public MetadataResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TableMeta tableMeta(int j) { return tableMeta(new TableMeta(), j); }
  public TableMeta tableMeta(TableMeta obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int tableMetaLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public int contentMetaSize() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateContentMetaSize(int contentMetaSize) { int o = __offset(6); if (o != 0) { bb.putInt(o + bb_pos, contentMetaSize); return true; } else { return false; } }
  public boolean isValid() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateIsValid(boolean isValid) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, (byte)(isValid ? 1 : 0)); return true; } else { return false; } }
  public long waitPeriod() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateWaitPeriod(long waitPeriod) { int o = __offset(10); if (o != 0) { bb.putLong(o + bb_pos, waitPeriod); return true; } else { return false; } }

  public static int createMetadataResponse(FlatBufferBuilder builder,
      int tableMetaOffset,
      int contentMetaSize,
      boolean isValid,
      long waitPeriod) {
    builder.startObject(4);
    MetadataResponse.addWaitPeriod(builder, waitPeriod);
    MetadataResponse.addContentMetaSize(builder, contentMetaSize);
    MetadataResponse.addTableMeta(builder, tableMetaOffset);
    MetadataResponse.addIsValid(builder, isValid);
    return MetadataResponse.endMetadataResponse(builder);
  }

  public static void startMetadataResponse(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addTableMeta(FlatBufferBuilder builder, int tableMetaOffset) { builder.addOffset(0, tableMetaOffset, 0); }
  public static int createTableMetaVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTableMetaVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addContentMetaSize(FlatBufferBuilder builder, int contentMetaSize) { builder.addInt(1, contentMetaSize, 0); }
  public static void addIsValid(FlatBufferBuilder builder, boolean isValid) { builder.addBoolean(2, isValid, false); }
  public static void addWaitPeriod(FlatBufferBuilder builder, long waitPeriod) { builder.addLong(3, waitPeriod, 0L); }
  public static int endMetadataResponse(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishMetadataResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedMetadataResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

