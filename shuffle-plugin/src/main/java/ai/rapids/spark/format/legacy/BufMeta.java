// automatically generated by the FlatBuffers compiler, do not modify

package ai.rapids.spark.format.legacy;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Metadata about cuDF buffers of the column
 */
public final class BufMeta extends Table {
  public static BufMeta getRootAsBufMeta(ByteBuffer _bb) { return getRootAsBufMeta(_bb, new BufMeta()); }
  public static BufMeta getRootAsBufMeta(ByteBuffer _bb, BufMeta obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public BufMeta __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long tag() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateTag(long tag) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, tag); return true; } else { return false; } }
  public long len() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateLen(long len) { int o = __offset(6); if (o != 0) { bb.putLong(o + bb_pos, len); return true; } else { return false; } }

  public static int createBufMeta(FlatBufferBuilder builder,
      long tag,
      long len) {
    builder.startObject(2);
    BufMeta.addLen(builder, len);
    BufMeta.addTag(builder, tag);
    return BufMeta.endBufMeta(builder);
  }

  public static void startBufMeta(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addTag(FlatBufferBuilder builder, long tag) { builder.addLong(0, tag, 0L); }
  public static void addLen(FlatBufferBuilder builder, long len) { builder.addLong(1, len, 0L); }
  public static int endBufMeta(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

