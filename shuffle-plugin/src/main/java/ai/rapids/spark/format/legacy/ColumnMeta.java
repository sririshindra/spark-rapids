// automatically generated by the FlatBuffers compiler, do not modify

package ai.rapids.spark.format.legacy;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Metadata about cuDF Columns
 */
public final class ColumnMeta extends Table {
  public static ColumnMeta getRootAsColumnMeta(ByteBuffer _bb) { return getRootAsColumnMeta(_bb, new ColumnMeta()); }
  public static ColumnMeta getRootAsColumnMeta(ByteBuffer _bb, ColumnMeta obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public ColumnMeta __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BufMeta data() { return data(new BufMeta()); }
  public BufMeta data(BufMeta obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public BufMeta validity() { return validity(new BufMeta()); }
  public BufMeta validity(BufMeta obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public BufMeta offsets() { return offsets(new BufMeta()); }
  public BufMeta offsets(BufMeta obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public ColumnMeta children(int j) { return children(new ColumnMeta(), j); }
  public ColumnMeta children(ColumnMeta obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int childrenLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public int dType() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateDType(int dType) { int o = __offset(12); if (o != 0) { bb.putInt(o + bb_pos, dType); return true; } else { return false; } }
  public long nullCount() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateNullCount(long nullCount) { int o = __offset(14); if (o != 0) { bb.putLong(o + bb_pos, nullCount); return true; } else { return false; } }
  public long rowCount() { int o = __offset(16); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateRowCount(long rowCount) { int o = __offset(16); if (o != 0) { bb.putLong(o + bb_pos, rowCount); return true; } else { return false; } }

  public static int createColumnMeta(FlatBufferBuilder builder,
      int dataOffset,
      int validityOffset,
      int offsetsOffset,
      int childrenOffset,
      int dType,
      long nullCount,
      long rowCount) {
    builder.startObject(7);
    ColumnMeta.addRowCount(builder, rowCount);
    ColumnMeta.addNullCount(builder, nullCount);
    ColumnMeta.addDType(builder, dType);
    ColumnMeta.addChildren(builder, childrenOffset);
    ColumnMeta.addOffsets(builder, offsetsOffset);
    ColumnMeta.addValidity(builder, validityOffset);
    ColumnMeta.addData(builder, dataOffset);
    return ColumnMeta.endColumnMeta(builder);
  }

  public static void startColumnMeta(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(0, dataOffset, 0); }
  public static void addValidity(FlatBufferBuilder builder, int validityOffset) { builder.addOffset(1, validityOffset, 0); }
  public static void addOffsets(FlatBufferBuilder builder, int offsetsOffset) { builder.addOffset(2, offsetsOffset, 0); }
  public static void addChildren(FlatBufferBuilder builder, int childrenOffset) { builder.addOffset(3, childrenOffset, 0); }
  public static int createChildrenVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startChildrenVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDType(FlatBufferBuilder builder, int dType) { builder.addInt(4, dType, 0); }
  public static void addNullCount(FlatBufferBuilder builder, long nullCount) { builder.addLong(5, nullCount, 0L); }
  public static void addRowCount(FlatBufferBuilder builder, long rowCount) { builder.addLong(6, rowCount, 0L); }
  public static int endColumnMeta(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

