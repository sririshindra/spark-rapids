#!/usr/local/env groovy
/**
*
* Jenkinsfile for rapids-plugin building ubuntu cuda10 versions
*
*/

pipeline {
    agent { label 'vanilla' }

    options {
        ansiColor('xterm')
        timeout(time: 120, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        string(name: 'REF', defaultValue: 'branch-0.1', description: 'Commit to build')
    }

    environment {
        JENKINS_ROOT  = 'jenkins'
    }

    stages {
        stage('Ubuntu16 CUDA10.0') {
            agent { label 'docker-gpu' }
            steps {
                script {
                    def dockerImage = docker.build("rapids-plugin/spark3.0:ubuntu16-cuda10.0",
                        "-f $JENKINS_ROOT/Dockerfile.ubuntu16 \
                        --build-arg CUDA_VER=10.0 $JENKINS_ROOT")

                    dockerImage.inside("--runtime=nvidia -v ${HOME}/.m2:${HOME}/.m2:rw \
                        -v ${HOME}/.zinc:${HOME}/.zinc:rw \
                        -v /etc/passwd:/etc/passwd -v /etc/group:/etc/group") {
                        echo 'Buiding in ubuntu16 cuda10.0 ...'
                        sh 'mvn -U -B clean deploy'
                    }
                }
            }
        }
    } // end of stages

    post {
        always {
            script {
                if (currentBuild.currentResult == "SUCCESS") {
                    build(job: 'spark/plugin_integration',
                          propagate: false,
                          parameters: [string(name: 'REF', value: 'branch-0.1'),
                                       string(name: 'CUDF_VER', value: '0.11-SNAPSHOT'),
                                       booleanParam(name: 'BUILD_CENTOS7', value: false),])

                    updateGitlabCommitStatus(name: 'Jenkins CI', state: "success")
                    slack("#rapidsai-spark-cicd", "Success", color: "#33CC33")
                } else {
                    updateGitlabCommitStatus(name: 'Jenkins CI', state: "failed")
                    slack("#rapidsai-spark-cicd", "Failed", color: "#FF0000")
                }
            }
        }
    }
} // end of pipeline

void slack(Map params = [:], String channel, String message) {
    Map defaultParams = [
            color: "#000000",
            baseUrl: "https://nvidia.slack.com/services/hooks/jenkins-ci/",
            tokenCredentialId: "slack_token"
    ]

    params["channel"] = channel
    params["message"] = "${BUILD_URL}\n" + message

    slackSend(defaultParams << params)
}
