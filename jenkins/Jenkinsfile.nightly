#!/usr/local/env groovy
/*
 * Copyright (c) 2019-2020, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
*
* Jenkinsfile for building rapids-plugin
*
*/

pipeline {
    agent { label 'vanilla' }

    options {
        ansiColor('xterm')
        timeout(time: 120, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        choice(name: 'DEPLOY_TO', choices: ['Gpuwa', 'Local'],
            description: 'Where to deploy artifacts to')
        string(name: 'REF', defaultValue: 'branch-0.1', description: 'Commit to build')
    }

    environment {
        JENKINS_ROOT  = 'jenkins'
        MVN_GPUWA_MIRROR='-s jenkins/settings.xml -P mirror-apache-to-gpuwa'
        LIBCUDF_KERNEL_CACHE_PATH='/tmp'
        QUAY_IO = credentials("svcngcc_quayio")
    }

    triggers {
        cron('H 5 * * *')
    }

    stages {
        stage('Ubuntu16 CUDA10.1') {
            agent { label 'docker-gpu' }
            steps {
                script {
                    def IMAGE_NAME="quay.io/nvidia/spark:plugin-build-ubuntu16-cuda10.1"
                    sh """
                        docker login -u "$QUAY_IO_USR" -p "$QUAY_IO_PSW" https://quay.io
                        docker pull $IMAGE_NAME
                    """
                    docker.image(IMAGE_NAME).inside("--runtime=nvidia -v ${HOME}/.m2:${HOME}/.m2:rw \
                        -v ${HOME}/.zinc:${HOME}/.zinc:rw \
                        -v /etc/passwd:/etc/passwd -v /etc/group:/etc/group") {
                        sh "mvn -U -B clean deploy $MVN_GPUWA_MIRROR"
                        sh "jenkins/printJarVersion.sh 'CUDFVersion' '${HOME}/.m2/repository/ai/rapids/cudf/0.14-SNAPSHOT' 'cudf-0.14-' '-cuda10-1.jar'"
                        sh "jenkins/printJarVersion.sh 'SPARKVersion' '${HOME}/.m2/repository/org/apache/spark/spark-core_2.12/3.0.1-SNAPSHOT' 'spark-core_2.12-3.0.1-' '.jar'"
                    }
                }
            }
        }
    } // end of stages

    post {
        always {
            script {
                if (currentBuild.currentResult == "SUCCESS") {
                    build(job: 'spark/plugin_integration',
                          propagate: false,
                          parameters: [string(name: 'REF', value: 'branch-0.1'),
                                       string(name: 'CUDF_VER', value: '0.14-SNAPSHOT'),
                                       booleanParam(name: 'BUILD_CENTOS7', value: false),])

                    updateGitlabCommitStatus(name: 'Jenkins CI', state: "success")
                    slack("#rapidsai-spark-cicd", "Success", color: "#33CC33")
                } else {
                    updateGitlabCommitStatus(name: 'Jenkins CI', state: "failed")
                    slack("#rapidsai-spark-cicd", "Failed", color: "#FF0000")
                }
            }
        }
    }
} // end of pipeline

void slack(Map params = [:], String channel, String message) {
    Map defaultParams = [
            color: "#000000",
            baseUrl: "https://nvidia.slack.com/services/hooks/jenkins-ci/",
            tokenCredentialId: "slack_token"
    ]

    params["channel"] = channel
    params["message"] = "${BUILD_URL}\n" + message

    slackSend(defaultParams << params)
}
