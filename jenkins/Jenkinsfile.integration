#!/usr/local/env groovy
/**
*
* Jenkins file for running spark3.0 integration tests
*
*/

pipeline {
    agent none

    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 240, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        string(name: 'CUDF_VER', defaultValue: '0.12-SNAPSHOT',
            description: '-Dcudf.version=0.12-SNAPSHOT\n\n Default for cudf version')
        string(name: 'CUDA_CLASSIFIER', defaultValue: '',
            description: '-Dclassifier=\n\n Empty as cuda10.0 calssifier, cuda10-1 as cuda10.1 classifier')
        string(name: 'PROJECT_VER', defaultValue: '0.1-SNAPSHOT',
            description: 'Default project version 0.1-SNAPSHOT')
        string(name: 'SPARK_VER', defaultValue: '3.0.0-SNAPSHOT',
            description: 'Default spark version 3.0.0-SNAPSHOT')
        string(name: 'SERVER_URL', defaultValue: 'https://gpuwa.nvidia.com/artifactory/sw-spark-maven',
            description: 'Default maven repo URL where to download Spark3.0 tar file.')
        string(name: 'REF', defaultValue: 'branch-0.1', description: 'Commit to build')
    }

    environment {
        JENKINS_ROOT  = 'jenkins'
        TEST_SCRIPT = '$JENKINS_ROOT/spark-tests.sh'
    }

    stages {
        stage('centos7 cuda10.0') {
            agent { label 'docker-gpu' }
            steps {
                script {
                    def dockerImage = docker.build("spark3.0/integration:centos7-cuda10.0",
                        "-f $JENKINS_ROOT/Dockerfile.integration.centos7 \
                        --build-arg CUDA_VER=10.0 $JENKINS_ROOT")

                    dockerImage.inside("--runtime=nvidia -v ${HOME}/.zinc:${HOME}/.zinc:rw \
                        -v /etc/passwd:/etc/passwd -v /etc/group:/etc/group") {
                        echo "Running integration tests on centos7 cuda10.0"
                        sh "bash $TEST_SCRIPT"
                    }
                }
            }
        }
    } // end of stages
    post {
        always {
            script {
                def status = "failed"
                if (currentBuild.currentResult == "SUCCESS") {
                    status = "success"
                    slack("#rapidsai-spark-cicd", "Success", color: "#33CC33")
                }
                else {
                    slack("#rapidsai-spark-cicd", "Failed", color: "#FF0000")
                }
            }
            echo 'Pipeline finished!'
        }
    }
} // end of pipeline

void slack(Map params = [:], String channel, String message) {
    Map defaultParams = [
            color: "#000000",
            baseUrl: "https://nvidia.slack.com/services/hooks/jenkins-ci/",
            tokenCredentialId: "slack_token"
    ]

    params["channel"] = channel
    params["message"] = "${BUILD_URL}\n" + message

    slackSend(defaultParams << params)
}
